/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 09 04:29:21 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(10, 1, 10, 10, (-483), "", "");
      assertNotNull(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-483), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      
      Appt appt1 = new Appt(3, 4, (-1359), 3, 2387, "", "");
      assertFalse(appt1.equals((Object)appt0));
      assertNotNull(appt1);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals("", appt1.getTitle());
      assertEquals(4, appt1.getStartMinute());
      assertEquals(2, appt1.getRecurBy());
      assertFalse(appt1.isRecurring());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("", appt1.getDescription());
      assertEquals((-1359), appt1.getStartDay());
      assertFalse(appt1.getValid());
      assertEquals(3, appt1.getStartHour());
      assertEquals(2387, appt1.getStartYear());
      
      boolean boolean0 = linkedList0.add(appt1);
      assertTrue(boolean0);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, linkedList0.size());
      assertEquals("", appt1.getTitle());
      assertEquals(4, appt1.getStartMinute());
      assertEquals(2, appt1.getRecurBy());
      assertFalse(appt1.isRecurring());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("", appt1.getDescription());
      assertEquals((-1359), appt1.getStartDay());
      assertFalse(appt1.getValid());
      assertEquals(3, appt1.getStartHour());
      assertEquals(2387, appt1.getStartYear());
      assertNotSame(appt1, appt0);
      
      calDay0.addAppt(appt0);
      assertFalse(appt0.equals((Object)appt1));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-483), appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertNotSame(appt0, appt1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertFalse(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(10, 1, 10, 10, (-483), "", "");
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals((-483), appt0.getStartYear());
      assertEquals(10, appt0.getStartHour());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, linkedList0.size());
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals((-483), appt0.getStartYear());
      assertEquals(10, appt0.getStartHour());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, linkedList0.size());
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals((-483), appt0.getStartYear());
      assertEquals(10, appt0.getStartHour());
      
      calDay0.addAppt(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertFalse(calDay0.isValid());
      assertEquals(2, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(10, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals((-483), appt0.getStartYear());
      assertEquals(10, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, calDay0.getYear());
      assertEquals(11, calDay0.getDay());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      
      Iterator<?> iterator0 = calDay0.iterator();
      assertNotNull(iterator0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, calDay0.getYear());
      assertEquals(11, calDay0.getDay());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      
      calDay0.valid = true;
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      
      boolean boolean0 = calDay0.isValid();
      assertTrue(boolean0);
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      
      int int0 = calDay0.getYear();
      assertEquals(0, int0);
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      
      calDay0.year = (-2976);
      assertEquals((-2976), calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertFalse(calDay0.isValid());
      
      int int0 = calDay0.getYear();
      assertEquals((-2976), int0);
      assertEquals((-2976), calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertFalse(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calDay0.getYear());
      assertEquals(11, calDay0.getDay());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calDay0.getYear());
      assertEquals(11, calDay0.getDay());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      
      int int0 = calDay0.getSizeAppts();
      assertEquals(0, int0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, calDay0.getYear());
      assertEquals(11, calDay0.getDay());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(3, 1, 1392, 1, 1099, (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1392, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1099, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, linkedList0.size());
      assertEquals(1392, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1099, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, linkedList0.size());
      assertEquals(1392, appt0.getStartDay());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1099, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      
      calDay0.appts = linkedList0;
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(1, calDay0.getSizeAppts());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(2, linkedList0.size());
      assertEquals(2, calDay0.appts.size());
      
      int int0 = calDay0.getSizeAppts();
      assertEquals(1, int0);
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(1, calDay0.getSizeAppts());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
      
      int int0 = calDay0.getSizeAppts();
      assertEquals((-1), int0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      
      int int0 = calDay0.getMonth();
      assertEquals(1, int0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertFalse(calDay0.isValid());
      
      calDay0.month = (-3113);
      assertEquals(0, calDay0.getYear());
      assertEquals((-3113), calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals((-3113), calDay0.getDay());
      
      int int0 = calDay0.getMonth();
      assertEquals((-3113), int0);
      assertEquals(0, calDay0.getYear());
      assertEquals((-3113), calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals((-3113), calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      
      calDay0.month = (-3113);
      assertFalse(calDay0.isValid());
      assertEquals((-3113), calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals((-3113), calDay0.getDay());
      
      int int0 = calDay0.getDay();
      assertEquals((-3113), int0);
      assertFalse(calDay0.isValid());
      assertEquals((-3113), calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals((-3113), calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals((-1), calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals((-1), calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "");
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertEquals((-1), calDay0.getSizeAppts());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = calDay0.getAppts();
      assertNotNull(linkedList1);
      assertEquals(0, calDay0.getSizeAppts());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(1, linkedList1.size());
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      mockGregorianCalendar0.set((-299), (-299), (-299));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-299,MONTH=-299,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=-299,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      
      boolean boolean0 = calDay0.isValid();
      assertFalse(boolean0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNull(linkedList0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getDay());
      assertEquals(11, calDay0.getMonth());
      assertEquals(2, calDay0.getYear());
      assertTrue(calDay0.isValid());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(11, calDay0.getDay());
      assertEquals(11, calDay0.getMonth());
      assertEquals(2, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      
      String string0 = calDay0.toString();
      assertEquals("\t --- 11/11/2 --- \n --- -------- Appointments ------------ --- \nnull \n", string0);
      assertNotNull(string0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(11, calDay0.getDay());
      assertEquals(11, calDay0.getMonth());
      assertEquals(2, calDay0.getYear());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      
      calDay0.valid = true;
      assertEquals(0, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      
      // Undeclared exception!
      try { 
        calDay0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      
      calDay0.valid = true;
      assertEquals(0, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      
      // Undeclared exception!
      try { 
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      
      Iterator<?> iterator0 = calDay0.iterator();
      assertNull(iterator0);
      assertEquals(0, calDay0.getYear());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "", "");
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartYear());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertFalse(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt1 = new Appt(1000, 0, 0, 3, 1, "", "");
      assertFalse(appt1.equals((Object)appt0));
      assertNotNull(appt1);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("", appt1.getDescription());
      assertEquals(2, appt1.getRecurBy());
      assertFalse(appt1.isRecurring());
      assertEquals(0, appt1.getStartMinute());
      assertEquals("", appt1.getTitle());
      assertEquals(1000, appt1.getStartHour());
      assertEquals(0, appt1.getStartDay());
      assertEquals(1, appt1.getStartYear());
      assertFalse(appt1.getValid());
      
      boolean boolean0 = linkedList0.add(appt1);
      assertTrue(boolean0);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(3, appt1.getStartMonth());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("", appt1.getDescription());
      assertEquals(2, appt1.getRecurBy());
      assertFalse(appt1.isRecurring());
      assertEquals(0, appt1.getStartMinute());
      assertEquals("", appt1.getTitle());
      assertEquals(1000, appt1.getStartHour());
      assertEquals(0, appt1.getStartDay());
      assertEquals(1, appt1.getStartYear());
      assertFalse(appt1.getValid());
      assertNotSame(appt1, appt0);
      
      calDay0.addAppt(appt0);
      assertFalse(appt0.equals((Object)appt1));
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartYear());
      assertNotSame(appt0, appt1);
      
      calDay0.addAppt(appt0);
      assertFalse(appt0.equals((Object)appt1));
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(2, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getMonth());
      assertEquals("", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartYear());
      assertNotSame(appt0, appt1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(11, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertEquals(2, calDay0.getYear());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "");
      assertNotNull(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
      
      calDay0.addAppt(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(11, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(11, calDay0.getMonth());
      assertEquals(2, calDay0.getYear());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      
      String string0 = calDay0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getYear();
      assertEquals(2014, int0);
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getMonth();
      assertEquals(0, int0);
      assertFalse(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getDay();
      assertEquals(0, int0);
      assertFalse(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(10, 1, 10, 10, (-483), "", "");
      // Undeclared exception!
      try { 
        calDay0.addAppt(appt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = new Locale(">4]faHo@ru`4=fF", ">4]faHo@ru`4=fF", ">4]faHo@ru`4=fF");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getDay();
      assertTrue(calDay0.isValid());
      assertEquals(1, int0);
      assertEquals(2014, calDay0.getYear());
  }
}
