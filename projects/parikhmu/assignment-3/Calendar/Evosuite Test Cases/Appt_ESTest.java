/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 09 04:26:37 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "\t", "\t");
      appt0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 6, "uOi*rGCw", "uOi*rGCw");
      int[] intArray0 = new int[1];
      appt0.setRecurrence(intArray0, 11, 0, 6);
      appt0.isRecurring();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(0, 4, 4, 4, 4, "qOz;2KO", "qOz;2KO");
      appt0.setStartMinute(60);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, 0, 0, 1653, "[f9OZ:K*", "eM:dXOAAlfa@\"Bsd");
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 8, 8, "u bO\"id*rGw", "u bO\"id*rGw");
      boolean boolean0 = appt0.getValid();
      assertEquals(8, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(6, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(boolean0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(6, appt0.getStartMinute());
      assertEquals(8, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(3, 3, 2, 2, 3, "_fxx;Jm[NCH^ ,D+", "_fxx;Jm[NCH^ ,D+");
      appt0.getTitle();
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartHour());
      assertEquals(3, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(31, 31, 31, 0, 31, "", "");
      int int0 = appt0.getStartYear();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(31, appt0.getStartHour());
      assertEquals(31, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(31, appt0.getStartDay());
      assertEquals(31, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      int int0 = appt0.getStartYear();
      assertEquals((-4312), appt0.getStartHour());
      assertEquals((-2962), int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-4312), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(1309, appt0.getStartMinute());
      assertEquals("[mtR", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(10, 10, 10, 10, 10, "XBD)yl93>", "XBD)yl93>");
      int int0 = appt0.getStartMonth();
      assertEquals(2, appt0.getRecurBy());
      assertEquals("XBD)yl93>", appt0.getTitle());
      assertEquals(10, appt0.getStartDay());
      assertEquals("XBD)yl93>", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartHour());
      assertEquals(10, appt0.getStartYear());
      assertEquals(10, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt((-3135), 0, 0, 11, 0, "/", "\t");
      int int0 = appt0.getStartMinute();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
      assertEquals((-3135), appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("/", appt0.getTitle());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("\t", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 6, 6, "u bO\"id*rGw", "u bO\"id*rGw");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(6, appt0.getStartYear());
      assertEquals(6, appt0.getStartHour());
      assertEquals(6, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(6, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(6, appt0.getStartDay());
      assertEquals("u bO\"id*rGw", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "1", "");
      int int0 = appt0.getStartHour();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals("1", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(691, 691, 691, 0, (-102), "\n", "\n");
      int int0 = appt0.getStartHour();
      assertEquals(691, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-102), appt0.getStartYear());
      assertEquals(691, appt0.getStartDay());
      assertEquals(691, appt0.getStartMinute());
      assertEquals("\n", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals("\n", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(2, 1135, 2, 2, 2, "<~d@#qoLWD-~(=zY", "<~d@#qoLWD-~(=zY");
      int int0 = appt0.getStartDay();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 4, (-1089), "", "");
      appt0.setStartDay((-921));
      int int0 = appt0.getStartDay();
      assertEquals((-921), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 4, (-1089), "", "");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-1089), 0, 4);
      int int0 = appt0.getRecurNumber();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      int[] intArray0 = new int[5];
      appt0.setRecurrence(intArray0, (-4312), 1, (-4312));
      int int0 = appt0.getRecurNumber();
      assertEquals((-4312), appt0.getRecurBy());
      assertEquals((-4312), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(6, 6, 6, 8, 8, "u bO\"id*rGw", "u bO\"id*rGw");
      int[] intArray0 = new int[0];
      appt0.setRecurrence(intArray0, 2, 1, 6);
      int int0 = appt0.getRecurIncrement();
      assertEquals(6, appt0.getRecurNumber());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, "\t");
      assertEquals(2, appt0.getRecurBy());
      
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, 0, 0, 0);
      appt0.getRecurDays();
      assertEquals(0, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "\t", "");
      assertEquals(2, appt0.getRecurBy());
      
      appt0.setRecurrence((int[]) null, 0, 0, 0);
      int int0 = appt0.getRecurBy();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt((-3135), 0, 0, 11, 0, "/", "\t");
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1565), 0, (-2257));
      int int0 = appt0.getRecurBy();
      assertEquals((-2257), appt0.getRecurNumber());
      assertEquals((-1565), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 0, 0, "", "");
      appt0.getDescription();
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(31, appt0.getStartDay());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "\t", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, 3, (-29), 3, 3, "Nsm", "O");
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt((-547), (-547), (-547), 0, 0, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth((-547));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 24, 0, 0, "", "");
      // Undeclared exception!
      try { 
        appt0.setStartMonth(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 184, 0, 184, "i`r3\"9?&gEN'lV|XS", "i`r3\"9?&gEN'lV|XS");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 1811, 2, 60, "<YNQpfm2hw%%54Dm", "<JY!GOj!");
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(0, 11, 11, 11, 287, "qOz;52K|O", "qOz;52K|O");
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "4\u0006BXf&;_[?XNo");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(0, 3, 24, 0, 3, "", "");
      int[] intArray0 = new int[0];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarUtil.DaysInMonth = null;
      Appt appt0 = null;
      try {
        appt0 = new Appt(0, 3091, (-2733), (-2733), (-4038), "4\u0006BXf&;_[?XNo", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt((-2), (-2), (-2), (-2), (-2), "2 wps", "2 wps");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "\t", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-2522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt((-1525), (-1525), 12, 0, 12, (String) null, "Z2}-je");
      assertEquals("Z2}-je", appt0.getDescription());
      
      appt0.setDescription("Z2}-je");
      assertEquals(2, appt0.getRecurBy());
      assertEquals(12, appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals((-1525), appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-1525), appt0.getStartHour());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(12, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-3135), 0, 0, 11, 0, "/", "\t");
      assertEquals("/", appt0.getTitle());
      
      appt0.setTitle((String) null);
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 31, 0, 0, "", "");
      appt0.setTitle("");
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(31, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt((-1525), (-1525), 12, 0, 12, (String) null, "Z2}-je");
      int int0 = appt0.getStartMinute();
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(12, appt0.getStartYear());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("Z2}-je", appt0.getDescription());
      assertEquals((-1525), appt0.getStartHour());
      assertEquals(12, appt0.getStartDay());
      assertEquals((-1525), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-1957), 0, (-1957), 0, 0, "", "");
      int int0 = appt0.getStartHour();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-1957), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-1957), int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      int int0 = appt0.getStartMonth();
      assertEquals((-4312), appt0.getStartHour());
      assertEquals(1309, appt0.getStartMinute());
      assertEquals("[mtR", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
      assertEquals((-2962), appt0.getStartYear());
      assertEquals("[mtR", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-4312), appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-1892), (-1892), 0, 0, 0, "^2+.%olv7*(ll.~", "^2+.%olv7*(ll.~");
      int int0 = appt0.getStartYear();
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1892), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals((-1892), appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals("^2+.%olv7*(ll.~", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("^2+.%olv7*(ll.~", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      appt0.getValid();
      assertEquals("[mtR", appt0.getTitle());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-4312), appt0.getStartDay());
      assertEquals((-2962), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals((-4312), appt0.getStartHour());
      assertEquals(1309, appt0.getStartMinute());
      assertEquals("[mtR", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt((-1525), (-1525), 12, 0, 12, (String) null, "Z2}-je");
      String string0 = appt0.getTitle();
      assertNotNull(string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1525), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(12, appt0.getStartYear());
      assertEquals((-1525), appt0.getStartHour());
      assertEquals("Z2}-je", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(12, appt0.getStartDay());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 4, (-1089), "", "");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1089), appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(4, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1309, appt0.getStartMinute());
      assertEquals((-4312), appt0.getStartDay());
      assertEquals("[mtR", appt0.getDescription());
      assertEquals((-2962), appt0.getStartYear());
      assertEquals((-4312), appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("[mtR", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(21, 4, 4, 4, 4, "qz;52K|O", "qz;52K|O");
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
      assertFalse(appt0.isRecurring());
      assertEquals("\t4/4/4 at 9:4pm ,qz;52K|O, qz;52K|O\n", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(0, 4, 4, 4, 4, "qOz;2KO", "qOz;2KO");
      String string0 = appt0.toString();
      assertEquals("\t4/4/4 at 12:4am ,qOz;2KO, qOz;2KO\n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      int[] intArray0 = new int[5];
      appt0.setRecurrence(intArray0, (-4312), 1, (-4312));
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-4312), appt0.getRecurNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt((-1946), 0, (-1946), 0, 0, "", "");
      boolean boolean0 = appt0.isRecurring();
      assertEquals((-1946), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1946), appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 184, 0, 184, "i`r3\"9?&gEN'lV|XS", "i`r3\"9?&gEN'lV|XS");
      appt0.setRecurrence((int[]) null, (-887), (-1823), 2);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-1823), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 26, " z", " z");
      appt0.setDescription((String) null);
      assertEquals(0, appt0.getStartDay());
      assertEquals(26, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(" z", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, "\t");
      String string0 = appt0.getDescription();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals("\t", string0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      appt0.setStartHour(0);
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(12, 4, 4, 4, 287, "qOz;52K|O", "qOz;52K|O");
      appt0.setStartMinute((-1));
      assertEquals((-1), appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt(12, 4, 4, 4, 287, "qOz;52K|O", "qOz;52K|O");
      appt0.getRecurDays();
      assertEquals(4, appt0.getStartMinute());
      assertEquals(12, appt0.getStartHour());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(4, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(287, appt0.getStartYear());
      assertEquals(4, appt0.getStartMonth());
      assertEquals("qOz;52K|O", appt0.getDescription());
      assertEquals("qOz;52K|O", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "", "4\u0006BXf&;_[?XNo");
      appt0.setStartMonth(0);
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals("4\u0006BXf&;_[?XNo", appt0.getDescription());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(12, 4, 4, 4, 287, "qOz;52K|O", "qOz;52K|O");
      int int0 = appt0.getRecurBy();
      assertEquals(2, int0);
      assertEquals(4, appt0.getStartMonth());
      assertEquals(287, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(4, appt0.getStartDay());
      assertEquals(4, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(12, appt0.getStartHour());
      assertTrue(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 184, 0, 184, "i`r3\"9?&gEN'lV|XS", "i`r3\"9?&gEN'lV|XS");
      assertEquals(184, appt0.getStartYear());
      
      appt0.setStartYear(2);
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 184, 0, 184, "i`r3\"9?&gEN'lV|XS", "i`r3\"9?&gEN'lV|XS");
      int int0 = appt0.getRecurIncrement();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(184, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(184, appt0.getStartYear());
      assertEquals("i`r3\"9?&gEN'lV|XS", appt0.getDescription());
      assertEquals(0, int0);
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Appt appt0 = new Appt(12, 4, 4, 4, 287, "qOz;52K|O", "qOz;52K|O");
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\t4/4/287 at 12:4pm ,qOz;52K|O, qOz;52K|O\n", string0);
      assertNotNull(string0);
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Appt appt0 = new Appt((-4312), 1309, (-4312), 0, (-2962), "[mtR", "[mtR");
      int int0 = appt0.getRecurNumber();
      assertEquals(0, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-4312), appt0.getStartHour());
      assertEquals(1309, appt0.getStartMinute());
      assertEquals("[mtR", appt0.getTitle());
      assertEquals((-4312), appt0.getStartDay());
      assertEquals("[mtR", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2962), appt0.getStartYear());
  }
}
