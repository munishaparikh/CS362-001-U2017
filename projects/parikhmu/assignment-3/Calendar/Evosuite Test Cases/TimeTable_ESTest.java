/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 09 04:24:48 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import calendar.TimeTable;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(112, (-1240), 1, 8, 1, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      assertNotNull(appt0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartYear());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(112, appt0.getStartHour());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, linkedList0.size());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartYear());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(112, appt0.getStartHour());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(2, linkedList0.size());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartYear());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(112, appt0.getStartHour());
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      boolean boolean1 = linkedList0.add((Appt) null);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      Appt appt0 = new Appt(13, 0, 0, 0, 247, " 5Z6", (String) null);
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(13, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(247, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals(" 5Z6", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(13, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(247, appt0.getStartYear());
      assertEquals(0, appt0.getStartDay());
      assertEquals(" 5Z6", appt0.getTitle());
      assertFalse(appt0.getValid());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 2025, 16, 2025, 2025, 16);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=16,MONTH=2025,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2025,HOUR_OF_DAY=2025,MINUTE=2025,SECOND=16,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[6];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(112, (-1240), 1, 8, 1, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartYear());
      assertEquals(112, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, linkedList0.size());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartYear());
      assertEquals(112, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(boolean0);
      
      Appt appt1 = new Appt(5, 28, 7, 5, 28, "", (String) null);
      assertNotNull(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(28, appt1.getStartYear());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      
      boolean boolean1 = linkedList0.add(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(2, linkedList0.size());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(28, appt1.getStartYear());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertNotSame(appt1, appt0);
      assertTrue(boolean1);
      
      calDay0.addAppt(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2, calDay0.getSizeAppts());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(28, appt1.getStartYear());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertNotSame(appt1, appt0);
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt1);
      assertNull(linkedList1);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2, calDay0.getSizeAppts());
      assertEquals(3, linkedList0.size());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(28, appt1.getStartYear());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertNotSame(appt1, appt0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(112, (-1240), 1, 8, 1, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertFalse(appt0.getValid());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(112, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, linkedList0.size());
      assertFalse(appt0.getValid());
      assertEquals(8, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getStartDay());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(112, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(boolean0);
      
      Appt appt1 = new Appt(5, 28, 7, 5, 28, "", (String) null);
      assertNotNull(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertEquals(28, appt1.getStartYear());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      
      boolean boolean1 = linkedList0.add(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      assertEquals(2, linkedList0.size());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertEquals(28, appt1.getStartYear());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertNotSame(appt1, appt0);
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList0.add(appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(2, calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      assertEquals(3, linkedList0.size());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertEquals(28, appt1.getStartYear());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertNotSame(appt1, appt0);
      assertTrue(boolean2);
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt1);
      assertNotNull(linkedList1);
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(1, calDay0.getDay());
      assertEquals(2, linkedList0.size());
      assertEquals(5, appt1.getStartMonth());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals(28, appt1.getStartMinute());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals("", appt1.getTitle());
      assertEquals(28, appt1.getStartYear());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals("", appt1.getDescription());
      assertEquals(5, appt1.getStartHour());
      assertEquals(2, linkedList1.size());
      assertSame(linkedList0, linkedList1);
      assertNotSame(appt1, appt0);
      assertSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNotNull(linkedList0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(5, 28, 7, 5, 28, "", (String) null);
      assertNotNull(appt0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartMinute());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(28, appt0.getStartYear());
      assertEquals(7, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(2014, calDay0.getYear());
      assertTrue(calDay0.isValid());
      assertEquals(0, linkedList0.size());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(5, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(28, appt0.getStartMinute());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(28, appt0.getStartYear());
      assertEquals(7, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(5, 5, 2025, 5, 7, "Jbd", "Second date specified is not  before the first date specified.");
      assertNotNull(appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals("Jbd", appt0.getTitle());
      assertEquals(5, appt0.getStartHour());
      assertEquals(2025, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(7, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMonth());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, linkedList0.size());
      assertEquals("Jbd", appt0.getTitle());
      assertEquals(5, appt0.getStartHour());
      assertEquals(2025, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(7, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      Appt appt0 = new Appt(6, 6, 0, 0, 0, "de2cY,-]-et", "de2cY,-]-et");
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals("de2cY,-]-et", appt0.getDescription());
      assertEquals(6, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals("de2cY,-]-et", appt0.getTitle());
      assertEquals(6, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertNull(linkedList0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertFalse(appt0.getValid());
      assertEquals("de2cY,-]-et", appt0.getDescription());
      assertEquals(6, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartYear());
      assertEquals("de2cY,-]-et", appt0.getTitle());
      assertEquals(6, appt0.getStartHour());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertFalse(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(1, 1, 2, 1, 3, "Jbd", "Jbd");
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals("Jbd", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("Jbd", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      
      appt0.setRecurrence((int[]) null, 5, 5, 1);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals("Jbd", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertTrue(appt0.isRecurring());
      assertEquals(3, appt0.getStartYear());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals("Jbd", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
      assertEquals(5, appt0.getRecurBy());
      assertEquals(1, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, appt0.getStartMonth());
      
      boolean boolean0 = calDay0.appts.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getYear());
      assertEquals("Jbd", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertTrue(appt0.isRecurring());
      assertEquals(3, appt0.getStartYear());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals("Jbd", appt0.getTitle());
      assertEquals(1, appt0.getStartHour());
      assertEquals(5, appt0.getRecurBy());
      assertEquals(1, appt0.getRecurNumber());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, 2025, 2025);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2025,MONTH=2025,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2025,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(calDay0.appts, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(2, 5, 2, 1, 3, "Second date specified is not  before the first date specified.", "Jbd");
      assertNotNull(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals("Jbd", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      
      appt0.setRecurrence((int[]) null, 1, 5, 1);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getRecurBy());
      assertEquals("Jbd", appt0.getDescription());
      
      boolean boolean0 = calDay0.appts.add(appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertEquals(3, appt0.getStartYear());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(5, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getRecurBy());
      assertEquals("Jbd", appt0.getDescription());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, (-56), (-56));
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2025,MONTH=-56,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-56,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(calDay0.appts, mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotNull(linkedList1);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, calDay0.getMonth());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getDay());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2025,MONTH=-56,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-56,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, linkedList1.size());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      CalDay calDay0 = new CalDay();
      assertNotNull(calDay0);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      calDay0.appts = linkedList0;
      assertEquals((-1), calDay0.getSizeAppts());
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(2, 1, 2, 1, 2014, "=>?J", "=>?J");
      assertNotNull(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, appt0.getStartDay());
      assertEquals("=>?J", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("=>?J", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2014, appt0.getStartYear());
      
      appt0.setRecurrence((int[]) null, 2, 5, 1);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, appt0.getStartDay());
      assertEquals("=>?J", appt0.getTitle());
      assertTrue(appt0.isRecurring());
      assertEquals("=>?J", appt0.getDescription());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2014, appt0.getStartYear());
      
      boolean boolean0 = calDay0.appts.add(appt0);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertFalse(calDay0.isValid());
      assertEquals(0, calDay0.getMonth());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(0, calDay0.getDay());
      assertEquals(0, calDay0.getYear());
      assertEquals(2, appt0.getStartDay());
      assertEquals("=>?J", appt0.getTitle());
      assertTrue(appt0.isRecurring());
      assertEquals("=>?J", appt0.getDescription());
      assertEquals(5, appt0.getRecurIncrement());
      assertEquals(1, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartHour());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2014, appt0.getStartYear());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2014, 2014, 2014);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=2014,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2014,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar1);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(1, 1, 2, 1, 3, "Jbd", "Jbd");
      appt0.setRecurrence((int[]) null, 3, 3, 1);
      calDay0.appts.add(appt0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1997, 1997, 1997);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      timeTable0.getApptRange(calDay0.appts, mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1997,MONTH=1997,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1997,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(2, 7, 2, 1, 0, "Second date specified is not  before the first date specified.", "?,9U2");
      int[] intArray0 = new int[9];
      appt0.setRecurrence(intArray0, 2025, (-1113), (-2272));
      linkedList0.add(appt0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, (-56), (-56));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2025,MONTH=-56,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-56,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, linkedList1.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(2, 7, 2, 1, 0, "Second date specified is not  before the first date specified.", "?,9U2");
      calDay0.appts.add(appt0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, (-56), (-56));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(calDay0.appts, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(5, 5, 2025, 5, 7, "Jbd", "Second date specified is not  before the first date specified.");
      linkedList0.add(appt0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, (-56), (-56));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(calDay0.appts, mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2025,MONTH=-56,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-56,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, linkedList1.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2025, (-56), (-56));
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         verifyException("calendar.TimeTable", e);
      }
  }
}
